import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Timer front_door_timer = null
var OnOffType Maintenance = OFF
var DecimalType beforeDrinkingLevel = null
var DecimalType afterDrinkingLevel = null
var String catDrinking = null
var DecimalType beforeEatingLevel = null
var DecimalType afterEatingLevel = null
var String catEating = null

rule "Master switch"
when 
	Item EnOcean_switch_00298B1AA changed
then
	var state = EnOcean_switch_00298B1AA.state as OnOffType
	
    Elro_socket_C1.send(state)
    Elro_socket_C2.send(state)  
    Elro_socket_C3.send(state)  
    Elro_socket_C4.send(state)         
end


rule "Front door"
when Item EnOcean_sensor_0180AAFA changed
then
	if(EnOcean_sensor_0180AAFA.state == OPEN) {
		if(front_door_timer==null) {
			front_door_timer = createTimer(now.plusMinutes(1)) [|
 				pushNotification("abcdefghijklmnopqrstuvwxyz0123456789","Front door", "The front door has been open for 5 minutes! Is it supposed to be?")
			]
		}
	}
	else if(EnOcean_sensor_0180AAFA.state == CLOSED) {
		if(front_door_timer!=null) {
			front_door_timer.cancel
			front_door_timer = null
		}
	}
end


rule "Arduino"
	when 
		Item Arduino received update
	then
	    var String ArduinoUpdate = Arduino.state.toString.trim 
	    
	    var int rfid1StartsOn = ArduinoUpdate.indexOf("-B1-RFID1:") + "-B1-RFID1:".length
	    var String reading1 = ArduinoUpdate.mid(rfid1StartsOn, ArduinoUpdate.indexOf('-E1-')-rfid1StartsOn)
	    
	    var int rfid2StartsOn = ArduinoUpdate.indexOf("-B2-RFID2:") + "-B2-RFID2:".length
	    var String reading2 = ArduinoUpdate.mid(rfid2StartsOn, ArduinoUpdate.indexOf('-E2-')-rfid2StartsOn)
	    
	    Arduino_RFID1.postUpdate(reading1)
	    Arduino_RFID2.postUpdate(reading2)
end


rule "Video Light"
	when 
		Item camera_light changed
	then
	    var state = camera_light.state as OnOffType
	    sendCommand (Arduino , "light=" + state)
end


rule "Reset cat intake"
	when 
		Time cron "0 0 0 * * ?"
	then
		// At midnight, reset water and food intake for both cats
	    FoodIntakeSpot.postUpdate(0)
	    WaterIntakeSpot.postUpdate(0)
	    FoodIntakeTijger.postUpdate(0)
	    WaterIntakeTijger.postUpdate(0)
end


rule "Maintenance mode"
	when 
		Item EnOcean_switch_00298B1AB received update
	then
	    Maintenance = EnOcean_switch_00298B1AB.state as OnOffType
	    println("Maintenance: " + Maintenance)
end


rule "Water Dispenser"
	when 
		Item Rpisoc_weightWater received update
	then
	    var water_level = Rpisoc_weightWater.state as DecimalType
	    
	    if(Maintenance == OFF && water_level < 100) {
	    	executeCommandLine("/home/pi/psoc_2_pi/API_Python_v_1_1_1/cats_water.py")
	    }
end


rule "Food Dispenser"
	when 
		Item Rpisoc_weightFood received update 
	then
	    var food_level = Rpisoc_weightFood.state as DecimalType
	    
	    if(Maintenance == OFF && food_level < 5) {
	    	executeCommandLine("/home/pi/psoc_2_pi/API_Python_v_1_1_1/cats_food.py")
	    }
end

rule "Water Intake"
	when 
		Item Arduino_RFID1 changed 
	then
	    var drinking = Arduino_RFID1.state.toString()
	    var water_level = Rpisoc_weightWater.state as DecimalType
	    
	    if(drinking == "Spot" || drinking == "Tijger" ) {
	    	beforeDrinkingLevel = water_level
	    	catDrinking = drinking
	    } 
	    else {
	    	afterDrinkingLevel = water_level
	    	if(catDrinking == "Spot"){
	    		var currentIntake = WaterIntakeSpot.state as DecimalType
	    		var totalIntake = (beforeDrinkingLevel-afterDrinkingLevel) + currentIntake
	    		WaterIntakeSpot.postUpdate(totalIntake)
	    		catDrinking = null
	    	}
	    	else if(catDrinking == "Tijger"){
	    		var currentIntake = WaterIntakeTijger.state as DecimalType
	    		var totalIntake = (beforeDrinkingLevel-afterDrinkingLevel) + currentIntake
	    		WaterIntakeTijger.postUpdate(totalIntake)
	    		catDrinking = null
	    	}
	    	
	    }
end

rule "Food Intake"
	when 
		Item Arduino_RFID2 changed 
	then
	    var eating = Arduino_RFID2.state.toString()
	    var food_level = Rpisoc_weightFood.state as DecimalType
	    
	    if(eating == "Spot" || eating == "Tijger" ) {
	    	beforeEatingLevel = food_level
	    	catEating = eating
	    } 
	    else {
	    	afterEatingLevel = food_level
	    	if(catEating == "Spot"){
	    		var currentIntake = FoodIntakeSpot.state as DecimalType
	    		var totalIntake = (beforeEatingLevel-afterEatingLevel) + currentIntake
	    		FoodIntakeSpot.postUpdate(totalIntake)
	    		catEating = null
	    	}
	    	else if(catEating == "Tijger"){
	    		var currentIntake = FoodIntakeTijger.state as DecimalType
	    		var totalIntake = (beforeEatingLevel-afterEatingLevel) + currentIntake
	    		FoodIntakeTijger.postUpdate(totalIntake)
	    		catEating = null
	    	}
	    }
end